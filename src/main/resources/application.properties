# Configuration file
# key = value

quarkus.http.cors=true


quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.enable=true
quarkus.swagger-ui.path=/swagger-ui


quarkus.http.port=8080
quarkus.http.ssl-port=8443
quarkus.http.ssl.certificate.file=META-INF/resources/localhost.cert
quarkus.http.ssl.certificate.key-file=META-INF/resources/localhost.key



mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem
mp.jwt.verify.requireiss=false 
#I'll get to this later
#mp.jwt.verify.issuer=https://quarkus.io/using-jwt-rbac 
quarkus.smallrye-jwt.enabled=true
smallrye.jwt.token.header=Cookie
smallrye.jwt.token.cookie=token


quarkus.datasource.db-kind = postgresql
# in staging use the name of the docker compose service

%staging.quarkus.datasource.jdbc.url = jdbc:postgresql://postgres:5432/pokedocs
%staging.quarkus.hibernate-orm.database.generation = update
%staging.quarkus.datasource.username = test
%staging.quarkus.datasource.password = test

# in development use localhost

%dev.quarkus.datasource.jdbc.url = jdbc:postgresql://localhost:5432/pokedocs
%dev.quarkus.hibernate-orm.database.generation = drop-and-create
%dev.quarkus.datasource.username = test
%dev.quarkus.datasource.password = test

# while testing use an in memory database
%test.quarkus.datasource.db-kind = h2
%test.quarkus.datasource.jdbc.url = jdbc:h2:mem:pokedocs
%test.quarkus.hibernate-orm.database.generation = drop-and-create

#docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name postgres-quarkus-hibernate -e POSTGRES_USER=test -e POSTGRES_PASSWORD=test -e POSTGRES_DB=pokedocs -p 5432:5432 postgres:10.5